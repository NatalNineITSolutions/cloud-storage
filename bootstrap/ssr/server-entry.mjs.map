{"version":3,"file":"server-entry.mjs","sources":["../../common/resources/client/utils/urls/is-absolute-url.ts","../../common/resources/client/utils/http/error-status-is.ts","../../common/resources/client/http/query-client.ts","../../resources/client/server-entry.tsx"],"sourcesContent":["export function isAbsoluteUrl(url?: string): boolean {\r\n  if (!url) return false;\r\n  return /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/.test(url);\r\n}\r\n","import axios from 'axios';\r\n\r\nexport function errorStatusIs(err: unknown, status: number): boolean {\r\n  return axios.isAxiosError(err) && err.response?.status == status;\r\n}\r\n","import {QueryClient} from '@tanstack/react-query';\r\nimport axios, {AxiosRequestConfig} from 'axios';\r\nimport {getActiveWorkspaceId} from '../workspace/active-workspace-id';\r\nimport {isAbsoluteUrl} from '../utils/urls/is-absolute-url';\r\nimport {errorStatusIs} from '@common/utils/http/error-status-is';\r\n\r\nexport const queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 30000,\r\n      retry: (failureCount, err) => {\r\n        return (\r\n          !errorStatusIs(err, 401) &&\r\n          !errorStatusIs(err, 403) &&\r\n          !errorStatusIs(err, 404) &&\r\n          failureCount < 2\r\n        );\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport const apiClient = axios.create();\r\napiClient.defaults.withCredentials = true;\r\napiClient.defaults.responseType = 'json';\r\n// @ts-ignore\r\napiClient.defaults.headers = {\r\n  common: {\r\n    Accept: 'application/json',\r\n  },\r\n};\r\n\r\n// @ts-ignore\r\napiClient.interceptors.request.use((config: AxiosRequestConfig) => {\r\n  if (\r\n    !config.url?.startsWith('auth') &&\r\n    !config.url?.startsWith('secure') &&\r\n    !isAbsoluteUrl(config?.url)\r\n  ) {\r\n    config.url = `api/v1/${config.url}`;\r\n  }\r\n\r\n  const method = config.method?.toUpperCase();\r\n\r\n  // transform array query params in GET request to comma separated string\r\n  if (method === 'GET' && Array.isArray(config.params?.with)) {\r\n    config.params.with = config.params.with.join(',');\r\n  }\r\n  if (method === 'GET' && Array.isArray(config.params?.load)) {\r\n    config.params.load = config.params.load.join(',');\r\n  }\r\n  if (method === 'GET' && Array.isArray(config.params?.loadCount)) {\r\n    config.params.loadCount = config.params.loadCount.join(',');\r\n  }\r\n\r\n  // add workspace query parameter\r\n  const workspaceId = getActiveWorkspaceId();\r\n  if (workspaceId) {\r\n    const method = config.method?.toLowerCase();\r\n    if (['get', 'post', 'put'].includes(method!)) {\r\n      config.params = {...config.params, workspaceId};\r\n    }\r\n  }\r\n\r\n  // override PUT, DELETE, PATCH methods, they might not be supported on the backend\r\n  if (method === 'PUT' || method === 'DELETE' || method === 'PATCH') {\r\n    config.headers = {\r\n      ...config.headers,\r\n      'X-HTTP-Method-Override': method,\r\n    };\r\n    config.method = 'POST';\r\n    config.params = {\r\n      ...config.params,\r\n      _method: method,\r\n    };\r\n  }\r\n\r\n  if (import.meta.env.SSR) {\r\n    config.headers = {\r\n      ...config.headers,\r\n      referer: 'http://localhost',\r\n    };\r\n  }\r\n\r\n  return config;\r\n});\r\n","import {renderToPipeableStream} from 'react-dom/server';\r\nimport {BootstrapData} from '@common/core/bootstrap-data/bootstrap-data';\r\nimport process from 'process';\r\nimport {\r\n  createServer as createHttpServer,\r\n  IncomingMessage,\r\n  ServerResponse,\r\n} from 'http';\r\nimport {setBootstrapData} from '@common/core/bootstrap-data/use-backend-bootstrap-data';\r\nimport {StaticRouter} from 'react-router-dom/server';\r\nimport {CommonProvider} from '@common/core/common-provider';\r\nimport {AppRoutes} from '@app/app-routes';\r\nimport {queryClient} from '@common/http/query-client';\r\n\r\nlet port = 13714;\r\nprocess.argv.forEach(value => {\r\n  if (value.startsWith('port=')) {\r\n    port = parseInt(value.substring('port='.length));\r\n  }\r\n});\r\n\r\ninterface Data {\r\n  bootstrapData: BootstrapData;\r\n  url: string;\r\n}\r\n\r\nconst readableToString: (\r\n  readable: IncomingMessage,\r\n) => Promise<string> = readable => {\r\n  return new Promise((resolve, reject) => {\r\n    let data = '';\r\n    readable.on('data', chunk => (data += chunk));\r\n    readable.on('end', () => resolve(data));\r\n    readable.on('error', err => reject(err));\r\n  });\r\n};\r\n\r\nconst getPayload = async (request: IncomingMessage) => {\r\n  const payload = await readableToString(request);\r\n  return payload ? JSON.parse(payload) : {};\r\n};\r\n\r\ncreateHttpServer(async (request, response) => {\r\n  if (request.url === '/render') {\r\n    return render(request, response);\r\n  } else {\r\n    return handleOtherRoutes(request, response);\r\n  }\r\n}).listen(port, () => console.log('SSR server started.'));\r\n\r\nasync function render(request: IncomingMessage, response: ServerResponse) {\r\n  const data = (await getPayload(request)) as Data;\r\n\r\n  setBootstrapData(data.bootstrapData);\r\n\r\n  const {pipe, abort} = renderToPipeableStream(\r\n    <StaticRouter location={data.url}>\r\n      <CommonProvider>\r\n        <AppRoutes />\r\n      </CommonProvider>\r\n    </StaticRouter>,\r\n    {\r\n      onAllReady() {\r\n        response.setHeader('content-type', 'text/html');\r\n        pipe(response);\r\n        // clear query client to avoid memory leaks and to avoid data from being shared between requests\r\n        queryClient.clear();\r\n        response.end();\r\n      },\r\n    },\r\n  );\r\n\r\n  // abort after 2 seconds, if rendering takes longer than that\r\n  setTimeout(() => {\r\n    abort();\r\n  }, 2000);\r\n}\r\n\r\nasync function handleOtherRoutes(\r\n  request: IncomingMessage,\r\n  response: ServerResponse,\r\n) {\r\n  if (request.url === '/screenshot') {\r\n    takeScreenshot(request, response);\r\n  } else if (request.url === '/health') {\r\n    writeJsonResponse(response, {status: 'OK', timestamp: Date.now()});\r\n  } else if (request.url === '/shutdown') {\r\n    response.end();\r\n    process.exit();\r\n  } else {\r\n    writeJsonResponse(response, {status: 'NOT_FOUND', timestamp: Date.now()});\r\n  }\r\n}\r\n\r\nfunction writeJsonResponse(response: ServerResponse, data: object) {\r\n  try {\r\n    response.writeHead(200, {\r\n      'Content-Type': 'application/json',\r\n    });\r\n    response.write(JSON.stringify(data));\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n\r\n  response.end();\r\n}\r\n\r\nasync function getDataFromRedis() {\r\n  //@ts-ignore\r\n  const {Redis} = await import('ioredis');\r\n  const redis = new Redis();\r\n  return redis.get('bemusic_database_bootstrap_data');\r\n}\r\n\r\nasync function takeScreenshot(\r\n  request: IncomingMessage,\r\n  response: ServerResponse,\r\n) {\r\n  try {\r\n    const payload = await getPayload(request);\r\n    // @ts-ignore\r\n    const puppeteer = await import('puppeteer');\r\n    const browser = await puppeteer.launch({\r\n      executablePath: '/snap/bin/chromium',\r\n      headless: 'new',\r\n      defaultViewport: {\r\n        width: 800,\r\n        height: 600,\r\n      },\r\n    });\r\n    const page = await browser.newPage();\r\n    await page.goto(payload.url);\r\n    const image = await page.screenshot({\r\n      type: 'jpeg',\r\n      optimizeForSpeed: true,\r\n      quality: 40,\r\n      encoding: 'binary',\r\n    });\r\n    await browser.close();\r\n\r\n    response.writeHead(200, {\r\n      'Content-Type': 'image/jpeg',\r\n    });\r\n    response.write(image);\r\n    response.end();\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n\r\n  // abort after 3 seconds, if rendering takes longer than that\r\n  setTimeout(() => {\r\n    response.end();\r\n  }, 3000);\r\n}\r\n\r\nconsole.log(`Starting SSR server on port ${port}...`);\r\n"],"names":["createHttpServer"],"mappings":"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"}